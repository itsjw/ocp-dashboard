import { Directive, ElementRef, EventEmitter, HostListener, Input, NgModule, NgZone, Output } from '@angular/core';
import { Observable as Observable$1 } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/empty';

class ChangeFilter {
    /**
     * @param {?} _changes
     */
    constructor(_changes) {
        this._changes = _changes;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    static of(changes) {
        return new ChangeFilter(changes);
    }
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    notEmpty(key) {
        if (this._changes[key]) {
            let /** @type {?} */ value = this._changes[key].currentValue;
            if (value !== undefined && value !== null) {
                return Observable$1.of(value);
            }
        }
        return Observable$1.empty();
    }
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    has(key) {
        if (this._changes[key]) {
            let /** @type {?} */ value = this._changes[key].currentValue;
            return Observable$1.of(value);
        }
        return Observable$1.empty();
    }
}

class NgxEchartsDirective {
    /**
     * @param {?} el
     * @param {?} _ngZone
     */
    constructor(el, _ngZone) {
        this.el = el;
        this._ngZone = _ngZone;
        // chart events:
        this.chartInit = new EventEmitter();
        this.chartClick = new EventEmitter();
        this.chartDblClick = new EventEmitter();
        this.chartMouseDown = new EventEmitter();
        this.chartMouseUp = new EventEmitter();
        this.chartMouseOver = new EventEmitter();
        this.chartMouseOut = new EventEmitter();
        this.chartGlobalOut = new EventEmitter();
        this.chartContextMenu = new EventEmitter();
        this.chartDataZoom = new EventEmitter();
        this._chart = null;
        this.currentWindowWidth = null;
    }
    /**
     * @return {?}
     */
    createChart() {
        this.currentWindowWidth = window.innerWidth;
        let /** @type {?} */ dom = this.el.nativeElement;
        if (window && window.getComputedStyle) {
            let /** @type {?} */ prop = window.getComputedStyle(dom, null).getPropertyValue('height');
            if (!prop || prop === '0px') {
                dom.style.height = '400px';
            }
        }
        return this._ngZone.runOutsideAngular(() => echarts.init(dom, this.theme || undefined, this.initOpts || undefined));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onWindowResize(event) {
        if (event.target.innerWidth !== this.currentWindowWidth) {
            this.currentWindowWidth = event.target.innerWidth;
            if (this._chart) {
                this._chart.resize();
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ filter = ChangeFilter.of(changes);
        filter.notEmpty('options').subscribe(opt => this.onOptionsChange(opt));
        filter.notEmpty('merge').subscribe(opt => this.setOption(opt));
        filter.has('loading').subscribe(v => this.toggleLoading(!!v));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._chart) {
            this._chart.dispose();
            this._chart = null;
        }
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    onOptionsChange(opt) {
        if (opt) {
            if (!this._chart) {
                this._chart = this.createChart();
                // output echart instance:
                this.chartInit.emit(this._chart);
                // register events:
                this.registerEvents(this._chart);
            }
            this._chart.setOption(this.options, true);
            this._chart.resize();
        }
    }
    /**
     * @param {?} _chart
     * @return {?}
     */
    registerEvents(_chart) {
        if (_chart) {
            // register mouse events:
            _chart.on('click', e => this.chartClick.emit(e));
            _chart.on('dblClick', e => this.chartDblClick.emit(e));
            _chart.on('mousedown', e => this.chartMouseDown.emit(e));
            _chart.on('mouseup', e => this.chartMouseUp.emit(e));
            _chart.on('mouseover', e => this.chartMouseOver.emit(e));
            _chart.on('mouseout', e => this.chartMouseOut.emit(e));
            _chart.on('globalout', e => this.chartGlobalOut.emit(e));
            _chart.on('contextmenu', e => this.chartContextMenu.emit(e));
            // other events;
            _chart.on('datazoom', e => this.chartDataZoom.emit(e));
        }
    }
    /**
     * @return {?}
     */
    clear() {
        if (this._chart) {
            this._chart.clear();
        }
    }
    /**
     * @param {?} loading
     * @return {?}
     */
    toggleLoading(loading) {
        if (this._chart) {
            loading ? this._chart.showLoading() : this._chart.hideLoading();
        }
    }
    /**
     * @param {?} option
     * @param {?=} opts
     * @return {?}
     */
    setOption(option, opts) {
        if (this._chart) {
            this._chart.setOption(option, opts);
        }
    }
}
NgxEchartsDirective.decorators = [
    { type: Directive, args: [{
                selector: 'echarts, [echarts]'
            },] },
];
/**
 * @nocollapse
 */
NgxEchartsDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
];
NgxEchartsDirective.propDecorators = {
    'options': [{ type: Input },],
    'theme': [{ type: Input },],
    'loading': [{ type: Input },],
    'initOpts': [{ type: Input },],
    'merge': [{ type: Input },],
    'chartInit': [{ type: Output },],
    'chartClick': [{ type: Output },],
    'chartDblClick': [{ type: Output },],
    'chartMouseDown': [{ type: Output },],
    'chartMouseUp': [{ type: Output },],
    'chartMouseOver': [{ type: Output },],
    'chartMouseOut': [{ type: Output },],
    'chartGlobalOut': [{ type: Output },],
    'chartContextMenu': [{ type: Output },],
    'chartDataZoom': [{ type: Output },],
    'onWindowResize': [{ type: HostListener, args: ['window:resize', ['$event'],] },],
};

class NgxEchartsModule {
}
NgxEchartsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    NgxEchartsDirective
                ],
                exports: [
                    NgxEchartsDirective
                ]
            },] },
];
/**
 * @nocollapse
 */
NgxEchartsModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { NgxEchartsModule, NgxEchartsDirective };
//# sourceMappingURL=ngx-echarts.js.map
